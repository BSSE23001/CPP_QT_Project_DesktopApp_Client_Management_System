QT -= gui

#Keyword "QT" is a variable of .pro file which Defines the "QT MODULES" Used in the
#Project. By default this variable "CONTAINS CORE AND GUI MODULE".
#Here in this subproject we only want to use "QT CORE MODULE" so we can eliminate the gui
#module from the project by the SOMEWHAT OVERLOADED OPERATORS as shown above "QT -= gui"

#NOTE THAT NOW THIS PROJECT USES ONLY CORE QT MODULE

QT += sql network xml

TEMPLATE = lib

#As Explained Already, this TEMPLATE variable defines that this subproject will be a LIBRARY

DEFINES += CMLIB_LIBRARY

#The "DEFINES" variable simply adds preprocessor macros to the compiler’s command line arguments.
#If a macro is defined but not used, it won’t impact the build process or result in errors.
#When you add a macro to the DEFINES variable, it is as if you added a "#define" directive at
#the beginning of every source file in your project. This can be useful for controlling compilation
#options and enabling or disabling features based on the defined macros.
#This line adds CMLIB_LIBRARY to the list of preprocessor macros. This means that CMLIB_LIBRARY
#will be defined throughout your project during the compilation process.
#ITS USAGE IS SHOWN IN "cm-lib_global.h"

CONFIG += c++17

#CONFIG is a variable used to specify various configuration options for the build process.
#When you add an item to the CONFIG variable, it influences how the project is built by
#setting various flags and options.
#This line specifies that the project should be built/compiled using c++17 standard.
#This is essential if your code relies on features introduced in the C++17 standard,
#such as structured bindings, inline variables, or any of the other improvements and
#new features added in C++17.

TARGET = cm-lib

#The TARGET variable is used to specify the name of the FINAL output file generated by the
#build process. The value assigned to TARGET depends on the type of project you're
#building (e.g., an application, a library, etc.), which is "lib" -- "LIBRARY" in this case.
#So the compiled output file generated for this subproject will be "cm-lib.dll"

### NOTE: IMP: At this point we have not explicity defined exactly which kind of library we
#want to be exported. So the compiler will generate exactly what is suitable for our own project.
# But we can also explicity define the library export kind by adding further flags in "CONFIG"
# variable.
# TO CREATE SHARED LIBRARY, WE WILL DO AS ==> CONFIG += c++17 dll
# TO CREATE STATIC LIBRARY, WE WILL DO AS ==> CONFIG += c++17 staticlib

# You can make your code fail to compile if it uses deprecated APIs.
# In order to do so, uncomment the following line.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

INCLUDEPATH += source

#"INCLUDEPATH" is a variable which stores all the paths that are searched for a specific header files while using "#include"
#directive or while compiling. This is useful because if the headers are not in the same place as the source code files
#then we would have to do the following #include "path/to/header.h". But if we include the specific path to the
#header files used for this project in the "INCLUDEPATH" variable then we don't need to specify the path
#while including the headers into our source code file or any other file such as #include <header.h>

SOURCES += source/models/client.cpp \
    source/controllers/commandcontroller.cpp \
    source/controllers/databasecontroller.cpp \
    source/controllers/mastercontroller.cpp \
    source/data/datadecorator.cpp \
    source/data/datetimedecorator.cpp \
    source/data/dropdown.cpp \
    source/data/dropdownvalue.cpp \
    source/data/entity.cpp \
    source/data/enumeratordecorator.cpp \
    source/data/intdecorator.cpp \
    source/data/stringdecorator.cpp \
    source/framework/command.cpp \
    source/framework/objectfactory.cpp \
    source/models/address.cpp \
    source/models/appointment.cpp \
    source/models/clientsearch.cpp \
    source/models/contact.cpp \
    source/networking/networkaccessmanager.cpp \
    source/networking/webrequest.cpp \
    source/rss/rsschannel.cpp \
    source/rss/rssimage.cpp \
    source/rss/rssitem.cpp \
    source/utilities/xmlhelper.cpp

#"SOURCES" variable stores paths to all the source files that must/should be compiled during compilation

HEADERS += source/cm-lib_global.h \
    source/controllers/ICommandController.h \
    source/controllers/IDatabaseController.h \
    source/controllers/INavigationController.h \
    source/controllers/commandcontroller.h \
    source/controllers/databasecontroller.h \
    source/controllers/mastercontroller.h \
    source/controllers/navigation-controller.h \
    source/data/datadecorator.h \
    source/data/datetimedecorator.h \
    source/data/dropdown.h \
    source/data/dropdownvalue.h \
    source/data/entity.h \
    source/data/entitycollection.h \
    source/data/enumeratordecorator.h \
    source/data/intdecorator.h \
    source/data/stringdecorator.h \
    source/framework/IObjectFactory.h \
    source/framework/command.h \
    source/framework/objectfactory.h \
    source/models/address.h \
    source/models/appointment.h \
    source/models/client.h \
    source/models/clientsearch.h \
    source/models/contact.h \
    source/networking/INetworkAccessManager.h \
    source/networking/IWebRequest.h \
    source/networking/networkaccessmanager.h \
    source/networking/webrequest.h \
    source/rss/rsschannel.h \
    source/rss/rssimage.h \
    source/rss/rssitem.h \
    source/utilities/xmlhelper.h

#"HEADERS" variable stores paths to all the header files that are associated with this project

# Default rules for deployment.
unix {
    target.path = /usr/lib
}
!isEmpty(target.path): INSTALLS += target

include(../qmake-target-platform.pri)
include(../qmake-destination-path.pri)

#The above 2 lines are including another 2 files to this project file which are PACKAGE RESOURCE INDEX (.pri) Files
#storing some critical information about specific self-made variable or paths. These file are usually made to
#enhance the working of project while including and using their data in .pro files

message(cm-lib project dir: $${PWD})

DESTDIR = $$PWD/../binaries/$$DESTINATION_PATH
OBJECTS_DIR = $$PWD/build/$$DESTINATION_PATH/.obj
MOC_DIR = $$PWD/build/$$DESTINATION_PATH/.moc
RCC_DIR = $$PWD/build/$$DESTINATION_PATH/.qrc
UI_DIR = $$PWD/build/$$DESTINATION_PATH/.ui

#These variables specify the directories where various build outputs and intermediate files should be placed.
#"DESTDIR" : This variable specifies the directory where the final output (e.g., executable or library) should be placed.
#   DESTINATION_PATH is our self-made variable storing our desired specific path to store the output. It is made in
#   .pri files
#   According to this variable our final output files directory is such that if come to our "CURRENT DIRECTORY - PWD"
#   and move one directory back means at parent directory of our current one (specified by "../"). And then enter to
#   a folder named "binaries" and then go to (if present but if not present make) all the directories described by
#   the path stored in variable "DESTINATION_PATH" and when we reach at the end folder of the path, save the final outpu
#   there.
#
#"OBJECTS_DIR" : This variable specifies the directory where the compiler should place the intermediate object files
#(.o or .obj files).
#
#"MOC_DIR": This variable specifies the directory where the moc (Meta-Object Compiler) generated files should be placed.
#These files are generated by Qt's meta-object system.
#
#"RCC_DIR" : This variable specifies the directory where the rcc (Qt Resource Compiler) generated files should be placed.
#These files handle Qt's resource system.
#
#"UI_DIR" : This variable specifies the directory where the uic (User Interface Compiler) generated files should be placed.
#These files are generated from .ui files created by Qt Designer.

message(cm-lib output dir: $${DESTDIR})

DISTFILES += \
    source/data/Readme.txt
