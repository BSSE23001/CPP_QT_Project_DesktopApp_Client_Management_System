#include "datetimedecorator.h"

#include <QVariant>

namespace cm {
namespace data {

class DateTimeDecorator::Implementation {
public:
    QDateTime value;
    DateTimeDecorator* dateTimeDecorator{nullptr};

    Implemenation(DateTimeDecorator* _dateTimeDecorator, const QDateTime& _value)
        : dateTimeDecorator(_dateTimeDecorator), value(_value) {}
};

DateTimeDecorator::DateTimeDecorator(Entity *parent, const QString &key, const QString &label, const QDateTime &value)
    : DataDecorator(parent,key,label)
{
    implementation.reset(new Implementation(this,value));
}

const QDateTime& DateTimeDecorator::value() const {return implementation->value;}

DateTimeDecorator& DateTimeDecorator::setValue(const QDateTime &value)
{
    if(value != implementation->value){
        // We can Add Verification Mechanism Here
        implementation->value = value;
        emit valueChanged();
        // emitting signal
    }
    return *this;
}

QJsonValue DateTimeDecorator::jsonValue() const {
    return QJsonValue::fromVariant(QVariant(implementation->value));
}

void DateTimeDecorator::update(const QJsonObject &jsonObject) {
    if (jsonObject.contains(key())) {
        QJsonValue jsonValue = jsonObject.value(key());
        if (jsonValue.isString()) {
            QDateTime dateTime = QDateTime::fromString(jsonValue.toString(), Qt::ISODate);
            setValue(dateTime);
        }
    } else {
        setValue(QDateTime());
    }
}

}
}
